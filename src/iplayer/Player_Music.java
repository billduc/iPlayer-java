/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iplayer;

import java.io.File;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.beans.property.ObjectProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.util.Duration;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

/**
 *
 * @author billd
 */
public class Player_Music extends javax.swing.JFrame {

    /**
     * Creates new form Player_Music
     */
    
    private boolean check_onl = false;
    private boolean has_start = false;
    private boolean playing = false;
    private boolean haspause = false;
    private boolean ok_volume = true;
    private getFile getfile = new getFile();
    private ArrayList<String> listSongOff = new ArrayList<String>();
    private ArrayList<MediaPlayer> listMediaoff = new ArrayList<MediaPlayer>();
    private int song_play = -1;
    private ChangeListener<Duration> progressChangeListener;
    org.json.simple.parser.JSONParser parser = new org.json.simple.parser.JSONParser();
    private ArrayList<String> listURL;
    private ArrayList<String> listName;
    private ArrayList<String> listNamePlaylist;
    private ArrayList<String> listURLPlaylist;
    private MediaView mediaview = new MediaView();
    private int time = 0;
    private Thread threadProgress = new Thread() {
        @Override
        public void run() {
            super.run(); //To change body of generated methods, choose Tools | Templates.
            //int s =(int) listMediaoff.get(song_play).getTotalDuration().toSeconds();
            System.out.println("s = " + time);
            progressbar.setMaximum(time * 10);
            progressbar.setMinimum(0);
            progressbar.setValue(0);
            for (int i = 1; i <= time * 10; ++i) {
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Player_Music.class.getName()).log(Level.SEVERE, null, ex);
                }
                progressbar.setValue(i);
            }
        }

    };

    public Player_Music() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSong = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        inputNameSong_onl = new javax.swing.JTextField();
        search_onl = new javax.swing.JButton();
        selectPlaylist = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablePlaylist = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnOpenFile = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        progressbar = new javax.swing.JProgressBar();
        jPanel6 = new javax.swing.JPanel();
        btndown = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnstop = new javax.swing.JButton();
        btnvolume = new javax.swing.JButton();
        btnmix = new javax.swing.JButton();
        btnrepeat = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("iPlayer");
        setBackground(new java.awt.Color(44, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(101, 255, 241));
        setIconImages(null);
        setLocationByPlatform(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách bài hát", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tableSong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "STT", "Tên bài hát"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableSong);
        if (tableSong.getColumnModel().getColumnCount() > 0) {
            tableSong.getColumnModel().getColumn(0).setMinWidth(40);
            tableSong.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        search_onl.setText("serch");
        search_onl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_onlActionPerformed(evt);
            }
        });

        selectPlaylist.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn Playlist", "Playlist Mới", "Nhạc Trẻ", "Trữ Tình", "Cách Mạng", "Tiền Chiến", "Nhạc Trịnh", "Thiếu Nhi", "Rap Việt", "Rock Việt", "Âu, Mỹ", "Hàn Quốc", "Nhạc Hoa", "Nhạc Nhật", "Không Lời", "Nhạc Phim", "Thể Loại Khác" }));
        selectPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPlaylistActionPerformed(evt);
            }
        });

        tablePlaylist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Danh sách playlist"
            }
        ));
        tablePlaylist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePlaylistMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablePlaylist);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(inputNameSong_onl, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(search_onl))
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(selectPlaylist, javax.swing.GroupLayout.Alignment.LEADING, 0, 281, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputNameSong_onl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_onl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(selectPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnOpenFile.setText("mo file");
        btnOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btnOpenFile)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnOpenFile)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        progressbar.setFont(new java.awt.Font("Tahoma", 0, 5)); // NOI18N
        progressbar.setAlignmentX(0.0F);
        progressbar.setAlignmentY(0.0F);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btndown.setText("download");
        btndown.setEnabled(false);
        btndown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(264, Short.MAX_VALUE)
                .addComponent(btndown)
                .addGap(19, 19, 19))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btndown)
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Previous-icon.png"))); // NOI18N
        btnBack.setBorder(null);
        btnBack.setBorderPainted(false);
        btnBack.setContentAreaFilled(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Play-icon.png"))); // NOI18N
        btnPlay.setBorder(null);
        btnPlay.setBorderPainted(false);
        btnPlay.setContentAreaFilled(false);
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Next-icon.png"))); // NOI18N
        btnNext.setBorder(null);
        btnNext.setBorderPainted(false);
        btnNext.setContentAreaFilled(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnstop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Stop-icon (1).png"))); // NOI18N
        btnstop.setBorder(null);
        btnstop.setBorderPainted(false);
        btnstop.setContentAreaFilled(false);
        btnstop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnstopActionPerformed(evt);
            }
        });

        btnvolume.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/speaker.png"))); // NOI18N
        btnvolume.setBorder(null);
        btnvolume.setBorderPainted(false);
        btnvolume.setContentAreaFilled(false);
        btnvolume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnvolumeActionPerformed(evt);
            }
        });

        btnmix.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/shuffle1.png"))); // NOI18N
        btnmix.setBorder(null);
        btnmix.setBorderPainted(false);
        btnmix.setContentAreaFilled(false);

        btnrepeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/aaaaaaa2.png"))); // NOI18N
        btnrepeat.setBorder(null);
        btnrepeat.setBorderPainted(false);
        btnrepeat.setContentAreaFilled(false);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPlay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNext)
                .addGap(18, 18, 18)
                .addComponent(btnstop)
                .addGap(31, 31, 31)
                .addComponent(btnvolume, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnmix)
                .addGap(14, 14, 14)
                .addComponent(btnrepeat)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPlay)
                    .addComponent(btnvolume, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnrepeat)
                    .addComponent(btnmix)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnNext, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnstop)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenFileActionPerformed
        // TODO add your handling code here:

        //mediaview.getMediaPlayer().stop();
        String[] listPath = getfile.getListSong("Archivos MP3", "mp3");
        System.out.println("path: " + listPath[0] + "\n path 2:" + listPath[0].replace("\\", "/"));
        if (song_play != -1) {
            listMediaoff.get(song_play).stop();
            System.out.println("song playing: " + song_play);
            threadProgress.stop();
            progressbar.setValue(0);
            btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Play-icon.png")));
            playing = false;
            haspause = false;
            song_play = -1;
            check_onl = false;
        }
        if (listPath.length > 0) {
            listSongOff.clear();
            listSongOff.addAll(Arrays.asList(listPath));
            System.out.println("listsongoff size: " + listSongOff.size());
            DefaultTableModel tablemode = (DefaultTableModel) tableSong.getModel();
            tablemode.getDataVector().removeAllElements();
            File ftg;
            listMediaoff.clear();
            for (int i = 0; i < listSongOff.size(); ++i) {
                MediaPlayer ma = new MediaPlayer(new Media(new File(listSongOff.get(i).replace("\\", "/")).toURI().toString()));
                listMediaoff.add(ma);
                ftg = new File(listSongOff.get(i));
                tablemode.addRow(new Object[]{i + 1, ftg.getName().substring(0, ftg.getName().length() - 4)});
            }
        }


    }//GEN-LAST:event_btnOpenFileActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        // TODO add your handling code here:
        if (playing == false) {
            if (haspause == false) {
                int row = tableSong.getSelectedRow();
                System.out.println("row:" + row);
                if (row == -1) {
                    JOptionPane.showMessageDialog(this, "Vui lòng chọn bài hát", "Thông báo", 0);
                } else {
                    song_play = row;
//                    mediaview.setMediaPlayer(listMediaoff.get(song_play));
//                    mediaview.getMediaPlayer().play();
                    if (check_onl == true)
                        btndown.setEnabled(true);
                    else
                        btndown.setEnabled(false);
                    listMediaoff.get(song_play).play();
                    //setCurrentPlaying(listMediaoff.get(song_play));
                    time = (int) listMediaoff.get(song_play).getTotalDuration().toSeconds();
                    threadProgress = new Thread() {
                        @Override
                        public void run() {
                            super.run(); //To change body of generated methods, choose Tools | Templates.
                            //int s =(int) listMediaoff.get(song_play).getTotalDuration().toSeconds();
                            System.out.println("s = " + time);
                            progressbar.setMaximum(time * 10);
                            progressbar.setMinimum(0);
                            progressbar.setValue(0);
                            for (int i = 1; i <= time * 10; ++i) {
                                try {
                                    sleep(100);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(Player_Music.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                progressbar.setValue(i);
                            }
                        }

                    };
                    threadProgress.start();
                    //setCurrentlyPlaying(mediaview.getMediaPlayer());
                    btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Pause-icon.png")));
                    playing = true;
                }
            } else {
                listMediaoff.get(song_play).play();
                threadProgress.resume();
                //mediaview.getMediaPlayer().play();
                btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Pause-icon.png")));
                haspause = false;
                playing = true;
            }

        } else {
            //mediaview.getMediaPlayer().pause();
            listMediaoff.get(song_play).pause();
            threadProgress.suspend();
            btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Play-icon.png")));
            playing = false;
            haspause = true;
        }

    }//GEN-LAST:event_btnPlayActionPerformed

    private void setCurrentlyPlaying(final MediaPlayer newPlayer) {
        progressbar.setMinimum(0);
        progressbar.setMaximum((int) newPlayer.getTotalDuration().toMillis());
        progressbar.setValue(0);
        progressChangeListener = new ChangeListener<Duration>() {
            @Override
            public void changed(ObservableValue<? extends Duration> observableValue, Duration oldValue, Duration newValue) {
                progressbar.setValue((int) (newPlayer.getCurrentTime().toMillis()));
            }
        };
        newPlayer.currentTimeProperty().addListener(progressChangeListener);

        String source = newPlayer.getMedia().getSource();
        source = source.substring(0, source.length() - ".mp4".length());
        source = source.substring(source.lastIndexOf("/") + 1).replaceAll("%20", " ");
    }

    private void btnstopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnstopActionPerformed
        // TODO add your handling code here:
        on_stop();
    }//GEN-LAST:event_btnstopActionPerformed

    public void on_stop() {
        if (song_play != -1) {
            //mediaview.getMediaPlayer().stop();
            //mediaview.getMediaPlayer().currentTimeProperty().removeListener(progressChangeListener);
            listMediaoff.get(song_play).stop();
            threadProgress.stop();
            progressbar.setValue(0);
            btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Play-icon.png")));
            playing = false;
            haspause = false;
        }
    }

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if (song_play != -1) {
            fun_next();
        }
    }//GEN-LAST:event_btnNextActionPerformed

    public void fun_next() {
//        final MediaPlayer curPlayer = mediaview.getMediaPlayer();
//        MediaPlayer nextPlayer = listMediaoff.get((listMediaoff.indexOf(curPlayer) + 1) % listMediaoff.size());
//        tableSong.setRowSelectionInterval((listMediaoff.indexOf(curPlayer) + 1) % listMediaoff.size(), (listMediaoff.indexOf(curPlayer) + 1) % listMediaoff.size());
//        mediaview.setMediaPlayer(nextPlayer);
//        curPlayer.stop();
//        nextPlayer.play();

        //listMediaoff.get(song_play).currentTimeProperty().removeListener(progressChangeListener);
        listMediaoff.get(song_play).stop();
        song_play = (song_play + 1) % listMediaoff.size();
        tableSong.setRowSelectionInterval(song_play, song_play);
        threadProgress.stop();
        listMediaoff.get(song_play).play();
        btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Pause-icon.png")));
        playing = true;
        haspause = false;
        time = (int) listMediaoff.get(song_play).getTotalDuration().toSeconds();
        threadProgress = new Thread() {
            @Override
            public void run() {
                super.run(); //To change body of generated methods, choose Tools | Templates.
                //int s =(int) listMediaoff.get(song_play).getTotalDuration().toSeconds();
                System.out.println("s = " + time);
                progressbar.setMaximum(time * 10);
                progressbar.setMinimum(0);
                progressbar.setValue(0);
                for (int i = 1; i <= time * 10; ++i) {
                    try {
                        sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Player_Music.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    progressbar.setValue(i);
                }
            }

        };
        threadProgress.start();
    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        if (song_play != -1) {
            fun_back();
        }
    }//GEN-LAST:event_btnBackActionPerformed

    public void fun_back() {
//        //final MediaPlayer curPlayer = mediaview.getMediaPlayer();
//        //int curr = listMediaoff.indexOf(curPlayer);
//        MediaPlayer nextPlayer;
//        if (curr > 0) {
//            nextPlayer = listMediaoff.get(curr - 1);
//        } else {
//            nextPlayer = listMediaoff.get(listMediaoff.size() - 1);
//        }
//
//        tableSong.setRowSelectionInterval(listMediaoff.indexOf(nextPlayer), listMediaoff.indexOf(nextPlayer));
//        mediaview.setMediaPlayer(nextPlayer);
//        curPlayer.stop();
//        nextPlayer.play();
        listMediaoff.get(song_play).stop();
        if (song_play > 0) {
            song_play--;
        } else {
            song_play = listMediaoff.size() - 1;
        }
        tableSong.setRowSelectionInterval(song_play, song_play);
        listMediaoff.get(song_play).play();
        btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Pause-icon.png")));
        playing = true;
        haspause = false;
        threadProgress.stop();
        time = (int) listMediaoff.get(song_play).getTotalDuration().toSeconds();
        threadProgress = new Thread() {
            @Override
            public void run() {
                super.run(); //To change body of generated methods, choose Tools | Templates.
                //int s =(int) listMediaoff.get(song_play).getTotalDuration().toSeconds();
                System.out.println("s = " + time);
                progressbar.setMaximum(time * 10);
                progressbar.setMinimum(0);
                progressbar.setValue(0);
                for (int i = 1; i <= time * 10; ++i) {
                    try {
                        sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Player_Music.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    progressbar.setValue(i);
                }
            }

        };
        threadProgress.start();
    }
    private void btnvolumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnvolumeActionPerformed
        // TODO add your handling code here:
        if (song_play != -1) {
            if (ok_volume == true) {
                ok_volume = false;
                //listMediaoff.get(song_play).setVolume(0);
                //mediaview.getMediaPlayer().setVolume(0);
                listMediaoff.get(song_play).setVolume(0);
                btnvolume.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mute3.png")));
                //btnvolume.setText("mute");
            } else {
                ok_volume = true;
                //listMediaoff.get(song_play).setVolume(1);
                btnvolume.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mute.png")));
                listMediaoff.get(song_play).setVolume(1);
//              mediaview.getMediaPlayer().setVolume(1);
                //btnvolume.setText("volume");
            }

        }
    }//GEN-LAST:event_btnvolumeActionPerformed

    private void search_onlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_onlActionPerformed
        // TODO add your handling code here:search_onl();
        check_onl =  true;
        search_onl();
        inputNameSong_onl.setText("");
    }//GEN-LAST:event_search_onlActionPerformed

    private void selectPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPlaylistActionPerformed
        // TODO add your handling code here:
        HttpURLConnectionExample http = new HttpURLConnectionExample();
        String playlist = null;
        String selected = selectPlaylist.getSelectedItem().toString();
        if (selected.equals("Playlist Mới")) {
            playlist = "playlist-list";
        } else if (selected.equals("Nhạc Trẻ")) {
            playlist = "nhac-tre";
        } else if (selected.equals("Trữ Tình")) {
            playlist = "tru-tinh";
        } else if (selected.equals("Cách Mạng")) {
            playlist = "cach-mang";
        } else if (selected.equals("Tiền Chiến")) {
            playlist = "tien-chien";
        } else if (selected.equals("Nhạc Trịnh")) {
            playlist = "nhac-trinh";
        } else if (selected.equals("Thiếu Nhi")) {
            playlist = "thieu-nhi";
        } else if (selected.equals("Rap Việt")) {
            playlist = "rap-viet";
        } else if (selected.equals("Rock Việt")) {
            playlist = "rock-viet";
        } else if (selected.equals("Âu, Mỹ")) {
            playlist = "au-my";
        } else if (selected.equals("Hàn Quốc")) {
            playlist = "han-quoc";
        } else if (selected.equals("Nhạc Hoa")) {
            playlist = "nhac-hoa";
        } else if (selected.equals("Nhạc Nhật")) {
            playlist = "nhac-nhat";
        } else if (selected.equals("Không Lời")) {
            playlist = "khong-loi";
        } else if (selected.equals("Nhạc Phim")) {
            playlist = "nhac-phim";
        } else if (selected.equals("Thể Loại Khác")) {
            playlist = "the-loai-khac";
        }
        if (playlist.equals("trong")) {
            System.out.println("Select di");
        } else {
            String jsonplaylist = null;
            try {
                jsonplaylist = http.Get_playlist(playlist);
                System.out.println(jsonplaylist);
                Object obj = parser.parse(jsonplaylist);
                JSONArray array = (JSONArray) obj;
                int larray = array.size();
//                listURL = new ArrayList<>();
                listNamePlaylist = new ArrayList<>();
                listURLPlaylist = new ArrayList<>();
                DefaultTableModel tbmode = (DefaultTableModel) tablePlaylist.getModel();
                tbmode.getDataVector().removeAllElements();
                for (int i = 0; i < larray; i++) {
                    JSONObject obj2 = (JSONObject) array.get(i);
                    listURLPlaylist.add(obj2.get("LinkMV").toString());
                    tbmode.addRow(new Object[]{obj2.get("TenPlaylist").toString()});
                }

            } catch (Exception ex) {
                Logger.getLogger(Player_Music.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_selectPlaylistActionPerformed

    private void tablePlaylistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePlaylistMouseClicked
        // TODO add your handling code here:
        //song_play = -1;
//        playing = false;
//        haspause = false;
        check_onl = true;
        if (song_play != -1) {
            listMediaoff.get(song_play).stop();
            System.out.println("song playing: " + song_play);
            threadProgress.stop();
            progressbar.setValue(0);
            btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Play-icon.png")));
            playing = false;
            haspause = false;
            song_play = -1;
        }
        String url = listURLPlaylist.get(tablePlaylist.getSelectedRow());
        HttpURLConnectionExample http = new HttpURLConnectionExample();
        try {
            String json_song_list = http.Getsong_playlist(url);
            Object obj = parser.parse(json_song_list);
            JSONArray array = (JSONArray) obj;
            int larray = array.size();
            listURL = new ArrayList<>();
            DefaultTableModel tbmode = (DefaultTableModel) tableSong.getModel();
            tbmode.getDataVector().removeAllElements();
            listMediaoff.clear();

            for (int i = 0; i < larray; i++) {
                JSONObject obj2 = (JSONObject) array.get(i);
                String link = obj2.get("location").toString();
                int len2 = link.length();
                String link2 = link.substring(2, len2 - 2);
                String link3 = link2.replace("\\", "");
                listURL.add(link3);
                MediaPlayer ma = new MediaPlayer(new Media(link3));
                listMediaoff.add(ma);
                String text = obj2.get("title").toString();
                int len = text.length();
                String text2 = text.substring(2, len - 2);
                tbmode.addRow(new Object[]{i + 1, text2});
            }
        } catch (Exception ex) {
            Logger.getLogger(Player_Music.class.getName()).log(Level.SEVERE, null, ex);
        }
//        if (has_start == false) {
//            has_start = true;
//        } else {
//            mediaview.getMediaPlayer().stop();
//        }

        //mediaview.getMediaPlayer().stop();
//        add_MediaView();
        //mediaview.getMediaPlayer().stop();
    }//GEN-LAST:event_tablePlaylistMouseClicked

    private void btndownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndownActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc  = new JFileChooser();
        jfc.setCurrentDirectory(new java.io.File("."));
        jfc.setDialogTitle("chọn thư mục lưu");
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.setAcceptAllFileFilterUsed(false);
        
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
             try {
                File fileToSave = jfc.getSelectedFile();
                String path = fileToSave.getPath();
                System.out.println("Save as file: " + path);
                HttpDownloadUtility down = new HttpDownloadUtility();
                System.out.println("bai: " + song_play);
                String url = listURL.get(song_play);
                down.downloadFile(url, path);
            } catch (IOException ex) {
                Logger.getLogger(Player_Music.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btndownActionPerformed

    private void search_onl() {

        String textSearch = inputNameSong_onl.getText();
        HttpURLConnectionExample http = new HttpURLConnectionExample();
        String jsonui = null;
        try {
            jsonui = http.sendGet(textSearch);
        } catch (Exception ex) {
            Logger.getLogger(Player_Music.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (song_play != -1) {
            listMediaoff.get(song_play).stop();
            System.out.println("song playing: " + song_play);
            threadProgress.stop();
            progressbar.setValue(0);
            btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Aqua-Play-icon.png")));
            playing = false;
            haspause = false;
            song_play = -1;
            check_onl = true;
        }
        try {
            System.out.println(jsonui);
            Object obj = parser.parse(jsonui);
            JSONArray array = (JSONArray) obj;
            int larray = array.size();

            listURL = new ArrayList<>();
            listName = new ArrayList<>();
            DefaultTableModel tbmode = (DefaultTableModel) tableSong.getModel();
            tbmode.getDataVector().removeAllElements();
            listMediaoff.clear();
            for (int i = 0; i < larray; i++) {
                JSONObject obj2 = (JSONObject) array.get(i);
                listURL.add(obj2.get("LinkSong").toString());
                MediaPlayer ma = new MediaPlayer(new Media(obj2.get("LinkSong").toString()));
                listMediaoff.add(ma);
                listName.add(obj2.get("TenSong").toString() + " - " + obj2.get("CaSi").toString());
                //System.out.println(listName.get(i));
                tbmode.addRow(new Object[]{i + 1, listName.get(i)});
            }
        } catch (org.json.simple.parser.ParseException pe) {

            System.out.println("position: " + pe.getPosition());
            System.out.println(pe);
        }

    }

    public void setCurrentPlaying(final MediaPlayer newPlay) {

        progressbar.setMaximum((int) newPlay.getTotalDuration().toSeconds());
        progressbar.setMinimum(0);
        progressbar.setValue(1);
        progressChangeListener = new ChangeListener<Duration>() {
            @Override
            public void changed(ObservableValue<? extends Duration> observable, Duration oldValue, Duration newValue) {
                progressbar.setValue((int) newPlay.getCurrentTime().toSeconds());
                //throw new UnsupportedOperationException("Not supported yet.");   
            }
        };
        newPlay.currentTimeProperty().addListener(progressChangeListener);
    }

    private void add_MediaView() {
        mediaview = new MediaView(listMediaoff.get(0));
        for (int i = 0; i < listMediaoff.size(); ++i) {
            final MediaPlayer player = listMediaoff.get(i);
            final MediaPlayer nextPlayer = listMediaoff.get((i + 1) % listMediaoff.size());
            final int inext = (i + 1) % listMediaoff.size();
            player.setOnEndOfMedia(new Runnable() {
                @Override
                public void run() {
                    player.currentTimeProperty().removeListener(progressChangeListener);
                    mediaview.setMediaPlayer(nextPlayer);
                    tableSong.setRowSelectionInterval(inext, inext);
                    nextPlayer.play();
                }
            });
        }

        mediaview.mediaPlayerProperty().addListener(new ChangeListener<MediaPlayer>() {
            @Override
            public void changed(ObservableValue<? extends MediaPlayer> observableValue, MediaPlayer oldPlayer, MediaPlayer newPlayer) {
                setCurrentlyPlaying(newPlayer);
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Player_Music.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Player_Music.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Player_Music.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Player_Music.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Player_Music().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnOpenFile;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btndown;
    private javax.swing.JButton btnmix;
    private javax.swing.JButton btnrepeat;
    private javax.swing.JButton btnstop;
    private javax.swing.JButton btnvolume;
    private javax.swing.JTextField inputNameSong_onl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JButton search_onl;
    private javax.swing.JComboBox<String> selectPlaylist;
    private javax.swing.JTable tablePlaylist;
    private javax.swing.JTable tableSong;
    // End of variables declaration//GEN-END:variables
}
